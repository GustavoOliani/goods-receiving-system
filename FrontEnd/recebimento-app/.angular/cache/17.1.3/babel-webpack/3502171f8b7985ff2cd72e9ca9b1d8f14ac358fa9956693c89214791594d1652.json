{"ast":null,"code":"/**\n * @license Angular v17.1.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵnormalizeQueryParams, LocationStrategy, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\nclass SpyLocation {\n  constructor() {\n    this.urlChanges = [];\n    this._history = [new LocationState('', '', null)];\n    this._historyIndex = 0;\n    /** @internal */\n    this._subject = new EventEmitter();\n    /** @internal */\n    this._basePath = '';\n    /** @internal */\n    this._locationStrategy = null;\n    /** @internal */\n    this._urlChangeListeners = [];\n    /** @internal */\n    this._urlChangeSubscription = null;\n  }\n  /** @nodoc */\n  ngOnDestroy() {\n    this._urlChangeSubscription?.unsubscribe();\n    this._urlChangeListeners = [];\n  }\n  setInitialPath(url) {\n    this._history[this._historyIndex].path = url;\n  }\n  setBaseHref(url) {\n    this._basePath = url;\n  }\n  path() {\n    return this._history[this._historyIndex].path;\n  }\n  getState() {\n    return this._history[this._historyIndex].state;\n  }\n  isCurrentPathEqualTo(path, query = '') {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n    return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n  }\n  simulateUrlPop(pathname) {\n    this._subject.emit({\n      'url': pathname,\n      'pop': true,\n      'type': 'popstate'\n    });\n  }\n  simulateHashChange(pathname) {\n    const path = this.prepareExternalUrl(pathname);\n    this.pushHistory(path, '', null);\n    this.urlChanges.push('hash: ' + pathname);\n    // the browser will automatically fire popstate event before each `hashchange` event, so we need\n    // to simulate it.\n    this._subject.emit({\n      'url': pathname,\n      'pop': true,\n      'type': 'popstate'\n    });\n    this._subject.emit({\n      'url': pathname,\n      'pop': true,\n      'type': 'hashchange'\n    });\n  }\n  prepareExternalUrl(url) {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return this._basePath + url;\n  }\n  go(path, query = '', state = null) {\n    path = this.prepareExternalUrl(path);\n    this.pushHistory(path, query, state);\n    const locationState = this._history[this._historyIndex - 1];\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push(url);\n    this._notifyUrlChangeListeners(path + ɵnormalizeQueryParams(query), state);\n  }\n  replaceState(path, query = '', state = null) {\n    path = this.prepareExternalUrl(path);\n    const history = this._history[this._historyIndex];\n    history.state = state;\n    if (history.path == path && history.query == query) {\n      return;\n    }\n    history.path = path;\n    history.query = query;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.urlChanges.push('replace: ' + url);\n    this._notifyUrlChangeListeners(path + ɵnormalizeQueryParams(query), state);\n  }\n  forward() {\n    if (this._historyIndex < this._history.length - 1) {\n      this._historyIndex++;\n      this._subject.emit({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n      this._subject.emit({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n  historyGo(relativePosition = 0) {\n    const nextPageIndex = this._historyIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n      this._historyIndex = nextPageIndex;\n      this._subject.emit({\n        'url': this.path(),\n        'state': this.getState(),\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }\n  onUrlChange(fn) {\n    this._urlChangeListeners.push(fn);\n    this._urlChangeSubscription ??= this.subscribe(v => {\n      this._notifyUrlChangeListeners(v.url, v.state);\n    });\n    return () => {\n      const fnIndex = this._urlChangeListeners.indexOf(fn);\n      this._urlChangeListeners.splice(fnIndex, 1);\n      if (this._urlChangeListeners.length === 0) {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeSubscription = null;\n      }\n    };\n  }\n  /** @internal */\n  _notifyUrlChangeListeners(url = '', state) {\n    this._urlChangeListeners.forEach(fn => fn(url, state));\n  }\n  subscribe(onNext, onThrow, onReturn) {\n    return this._subject.subscribe({\n      next: onNext,\n      error: onThrow,\n      complete: onReturn\n    });\n  }\n  normalize(url) {\n    return null;\n  }\n  pushHistory(path, query, state) {\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n    this._history.push(new LocationState(path, query, state));\n    this._historyIndex = this._history.length - 1;\n  }\n  static #_ = this.ɵfac = function SpyLocation_Factory(t) {\n    return new (t || SpyLocation)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SpyLocation,\n    factory: SpyLocation.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SpyLocation, [{\n    type: Injectable\n  }], null, null);\n})();\nclass LocationState {\n  constructor(path, query, state) {\n    this.path = path;\n    this.query = query;\n    this.state = state;\n  }\n}\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\nclass MockLocationStrategy extends LocationStrategy {\n  constructor() {\n    super();\n    this.internalBaseHref = '/';\n    this.internalPath = '/';\n    this.internalTitle = '';\n    this.urlChanges = [];\n    /** @internal */\n    this._subject = new EventEmitter();\n    this.stateChanges = [];\n  }\n  simulatePopState(url) {\n    this.internalPath = url;\n    this._subject.emit(new _MockPopStateEvent(this.path()));\n  }\n  path(includeHash = false) {\n    return this.internalPath;\n  }\n  prepareExternalUrl(internal) {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n  pushState(ctx, title, path, query) {\n    // Add state change to changes array\n    this.stateChanges.push(ctx);\n    this.internalTitle = title;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n  replaceState(ctx, title, path, query) {\n    // Reset the last index of stateChanges to the ctx (state) object\n    this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n    this.internalTitle = title;\n    const url = path + (query.length > 0 ? '?' + query : '');\n    this.internalPath = url;\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n  onPopState(fn) {\n    this._subject.subscribe({\n      next: fn\n    });\n  }\n  getBaseHref() {\n    return this.internalBaseHref;\n  }\n  back() {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      this.stateChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n  forward() {\n    throw 'not implemented';\n  }\n  getState() {\n    return this.stateChanges[(this.stateChanges.length || 1) - 1];\n  }\n  static #_ = this.ɵfac = function MockLocationStrategy_Factory(t) {\n    return new (t || MockLocationStrategy)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MockLocationStrategy,\n    factory: MockLocationStrategy.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockLocationStrategy, [{\n    type: Injectable\n  }], () => [], null);\n})();\nclass _MockPopStateEvent {\n  constructor(newUrl) {\n    this.newUrl = newUrl;\n    this.pop = true;\n    this.type = 'popstate';\n  }\n}\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nfunction parseUrl(urlStr, baseHref) {\n  const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n  let serverBase;\n  // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n  // an arbitrary base URL which can be removed afterward.\n  if (!verifyProtocol.test(urlStr)) {\n    serverBase = 'http://empty.com/';\n  }\n  let parsedUrl;\n  try {\n    parsedUrl = new URL(urlStr, serverBase);\n  } catch (e) {\n    const result = urlParse.exec(serverBase || '' + urlStr);\n    if (!result) {\n      throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n    }\n    const hostSplit = result[4].split(':');\n    parsedUrl = {\n      protocol: result[1],\n      hostname: hostSplit[0],\n      port: hostSplit[1] || '',\n      pathname: result[5],\n      search: result[6],\n      hash: result[8]\n    };\n  }\n  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n  }\n  return {\n    hostname: !serverBase && parsedUrl.hostname || '',\n    protocol: !serverBase && parsedUrl.protocol || '',\n    port: !serverBase && parsedUrl.port || '',\n    pathname: parsedUrl.pathname || '/',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || ''\n  };\n}\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\nclass MockPlatformLocation {\n  constructor(config) {\n    this.baseHref = '';\n    this.hashUpdate = new Subject();\n    this.popStateSubject = new Subject();\n    this.urlChangeIndex = 0;\n    this.urlChanges = [{\n      hostname: '',\n      protocol: '',\n      port: '',\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null\n    }];\n    if (config) {\n      this.baseHref = config.appBaseHref || '';\n      const parsedChanges = this.parseChanges(null, config.startUrl || 'http://_empty_/', this.baseHref);\n      this.urlChanges[0] = {\n        ...parsedChanges\n      };\n    }\n  }\n  get hostname() {\n    return this.urlChanges[this.urlChangeIndex].hostname;\n  }\n  get protocol() {\n    return this.urlChanges[this.urlChangeIndex].protocol;\n  }\n  get port() {\n    return this.urlChanges[this.urlChangeIndex].port;\n  }\n  get pathname() {\n    return this.urlChanges[this.urlChangeIndex].pathname;\n  }\n  get search() {\n    return this.urlChanges[this.urlChangeIndex].search;\n  }\n  get hash() {\n    return this.urlChanges[this.urlChangeIndex].hash;\n  }\n  get state() {\n    return this.urlChanges[this.urlChangeIndex].state;\n  }\n  getBaseHrefFromDOM() {\n    return this.baseHref;\n  }\n  onPopState(fn) {\n    const subscription = this.popStateSubject.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n  onHashChange(fn) {\n    const subscription = this.hashUpdate.subscribe(fn);\n    return () => subscription.unsubscribe();\n  }\n  get href() {\n    let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n    url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n    return url;\n  }\n  get url() {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n  parseChanges(state, url, baseHref = '') {\n    // When the `history.state` value is stored, it is always copied.\n    state = JSON.parse(JSON.stringify(state));\n    return {\n      ...parseUrl(url, baseHref),\n      state\n    };\n  }\n  replaceState(state, title, newUrl) {\n    const {\n      pathname,\n      search,\n      state: parsedState,\n      hash\n    } = this.parseChanges(state, newUrl);\n    this.urlChanges[this.urlChangeIndex] = {\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState\n    };\n  }\n  pushState(state, title, newUrl) {\n    const {\n      pathname,\n      search,\n      state: parsedState,\n      hash\n    } = this.parseChanges(state, newUrl);\n    if (this.urlChangeIndex > 0) {\n      this.urlChanges.splice(this.urlChangeIndex + 1);\n    }\n    this.urlChanges.push({\n      ...this.urlChanges[this.urlChangeIndex],\n      pathname,\n      search,\n      hash,\n      state: parsedState\n    });\n    this.urlChangeIndex = this.urlChanges.length - 1;\n  }\n  forward() {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex < this.urlChanges.length) {\n      this.urlChangeIndex++;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n  back() {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    if (this.urlChangeIndex > 0) {\n      this.urlChangeIndex--;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n  historyGo(relativePosition = 0) {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    const nextPageIndex = this.urlChangeIndex + relativePosition;\n    if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n      this.urlChangeIndex = nextPageIndex;\n    }\n    this.emitEvents(oldHash, oldUrl);\n  }\n  getState() {\n    return this.state;\n  }\n  /**\n   * Browsers are inconsistent in when they fire events and perform the state updates\n   * The most easiest thing to do in our mock is synchronous and that happens to match\n   * Firefox and Chrome, at least somewhat closely\n   *\n   * https://github.com/WICG/navigation-api#watching-for-navigations\n   * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94\n   * popstate is always sent before hashchange:\n   * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n   */\n  emitEvents(oldHash, oldUrl) {\n    this.popStateSubject.next({\n      type: 'popstate',\n      state: this.getState(),\n      oldUrl,\n      newUrl: this.url\n    });\n    if (oldHash !== this.hash) {\n      this.hashUpdate.next({\n        type: 'hashchange',\n        state: null,\n        oldUrl,\n        newUrl: this.url\n      });\n    }\n  }\n  static #_ = this.ɵfac = function MockPlatformLocation_Factory(t) {\n    return new (t || MockPlatformLocation)(i0.ɵɵinject(MOCK_PLATFORM_LOCATION_CONFIG, 8));\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MockPlatformLocation,\n    factory: MockPlatformLocation.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MockPlatformLocation, [{\n    type: Injectable\n  }], () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MOCK_PLATFORM_LOCATION_CONFIG]\n    }, {\n      type: Optional\n    }]\n  }], null);\n})();\n\n/**\n * Returns mock providers for the `Location` and `LocationStrategy` classes.\n * The mocks are helpful in tests to fire simulated location events.\n *\n * @publicApi\n */\nfunction provideLocationMocks() {\n  return [{\n    provide: Location,\n    useClass: SpyLocation\n  }, {\n    provide: LocationStrategy,\n    useClass: MockLocationStrategy\n  }];\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common/testing package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation, provideLocationMocks };","map":{"version":3,"names":["ɵnormalizeQueryParams","LocationStrategy","Location","i0","EventEmitter","Injectable","InjectionToken","Inject","Optional","Subject","SpyLocation","constructor","urlChanges","_history","LocationState","_historyIndex","_subject","_basePath","_locationStrategy","_urlChangeListeners","_urlChangeSubscription","ngOnDestroy","unsubscribe","setInitialPath","url","path","setBaseHref","getState","state","isCurrentPathEqualTo","query","givenPath","endsWith","substring","length","currPath","simulateUrlPop","pathname","emit","simulateHashChange","prepareExternalUrl","pushHistory","push","startsWith","go","locationState","_notifyUrlChangeListeners","replaceState","history","forward","back","historyGo","relativePosition","nextPageIndex","onUrlChange","fn","subscribe","v","fnIndex","indexOf","splice","forEach","onNext","onThrow","onReturn","next","error","complete","normalize","_","ɵfac","SpyLocation_Factory","t","_2","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","MockLocationStrategy","internalBaseHref","internalPath","internalTitle","stateChanges","simulatePopState","_MockPopStateEvent","includeHash","internal","pushState","ctx","title","externalUrl","onPopState","getBaseHref","pop","nextUrl","MockLocationStrategy_Factory","newUrl","urlParse","parseUrl","urlStr","baseHref","verifyProtocol","serverBase","test","parsedUrl","URL","e","result","exec","Error","hostSplit","split","protocol","hostname","port","search","hash","MOCK_PLATFORM_LOCATION_CONFIG","MockPlatformLocation","config","hashUpdate","popStateSubject","urlChangeIndex","appBaseHref","parsedChanges","parseChanges","startUrl","getBaseHrefFromDOM","subscription","onHashChange","href","JSON","parse","stringify","parsedState","oldUrl","oldHash","emitEvents","MockPlatformLocation_Factory","ɵɵinject","undefined","decorators","args","provideLocationMocks","provide","useClass"],"sources":["C:/Users/Oliani/Desktop/goods receiving system/FrontEnd/recebimento-app/node_modules/@angular/common/fesm2022/testing.mjs"],"sourcesContent":["/**\n * @license Angular v17.1.3\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { ɵnormalizeQueryParams, LocationStrategy, Location } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\nclass SpyLocation {\n    constructor() {\n        this.urlChanges = [];\n        this._history = [new LocationState('', '', null)];\n        this._historyIndex = 0;\n        /** @internal */\n        this._subject = new EventEmitter();\n        /** @internal */\n        this._basePath = '';\n        /** @internal */\n        this._locationStrategy = null;\n        /** @internal */\n        this._urlChangeListeners = [];\n        /** @internal */\n        this._urlChangeSubscription = null;\n    }\n    /** @nodoc */\n    ngOnDestroy() {\n        this._urlChangeSubscription?.unsubscribe();\n        this._urlChangeListeners = [];\n    }\n    setInitialPath(url) {\n        this._history[this._historyIndex].path = url;\n    }\n    setBaseHref(url) {\n        this._basePath = url;\n    }\n    path() {\n        return this._history[this._historyIndex].path;\n    }\n    getState() {\n        return this._history[this._historyIndex].state;\n    }\n    isCurrentPathEqualTo(path, query = '') {\n        const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n        const currPath = this.path().endsWith('/')\n            ? this.path().substring(0, this.path().length - 1)\n            : this.path();\n        return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n    }\n    simulateUrlPop(pathname) {\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n    }\n    simulateHashChange(pathname) {\n        const path = this.prepareExternalUrl(pathname);\n        this.pushHistory(path, '', null);\n        this.urlChanges.push('hash: ' + pathname);\n        // the browser will automatically fire popstate event before each `hashchange` event, so we need\n        // to simulate it.\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'popstate' });\n        this._subject.emit({ 'url': pathname, 'pop': true, 'type': 'hashchange' });\n    }\n    prepareExternalUrl(url) {\n        if (url.length > 0 && !url.startsWith('/')) {\n            url = '/' + url;\n        }\n        return this._basePath + url;\n    }\n    go(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        this.pushHistory(path, query, state);\n        const locationState = this._history[this._historyIndex - 1];\n        if (locationState.path == path && locationState.query == query) {\n            return;\n        }\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.urlChanges.push(url);\n        this._notifyUrlChangeListeners(path + ɵnormalizeQueryParams(query), state);\n    }\n    replaceState(path, query = '', state = null) {\n        path = this.prepareExternalUrl(path);\n        const history = this._history[this._historyIndex];\n        history.state = state;\n        if (history.path == path && history.query == query) {\n            return;\n        }\n        history.path = path;\n        history.query = query;\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.urlChanges.push('replace: ' + url);\n        this._notifyUrlChangeListeners(path + ɵnormalizeQueryParams(query), state);\n    }\n    forward() {\n        if (this._historyIndex < this._history.length - 1) {\n            this._historyIndex++;\n            this._subject.emit({\n                'url': this.path(),\n                'state': this.getState(),\n                'pop': true,\n                'type': 'popstate',\n            });\n        }\n    }\n    back() {\n        if (this._historyIndex > 0) {\n            this._historyIndex--;\n            this._subject.emit({\n                'url': this.path(),\n                'state': this.getState(),\n                'pop': true,\n                'type': 'popstate',\n            });\n        }\n    }\n    historyGo(relativePosition = 0) {\n        const nextPageIndex = this._historyIndex + relativePosition;\n        if (nextPageIndex >= 0 && nextPageIndex < this._history.length) {\n            this._historyIndex = nextPageIndex;\n            this._subject.emit({\n                'url': this.path(),\n                'state': this.getState(),\n                'pop': true,\n                'type': 'popstate',\n            });\n        }\n    }\n    onUrlChange(fn) {\n        this._urlChangeListeners.push(fn);\n        this._urlChangeSubscription ??= this.subscribe((v) => {\n            this._notifyUrlChangeListeners(v.url, v.state);\n        });\n        return () => {\n            const fnIndex = this._urlChangeListeners.indexOf(fn);\n            this._urlChangeListeners.splice(fnIndex, 1);\n            if (this._urlChangeListeners.length === 0) {\n                this._urlChangeSubscription?.unsubscribe();\n                this._urlChangeSubscription = null;\n            }\n        };\n    }\n    /** @internal */\n    _notifyUrlChangeListeners(url = '', state) {\n        this._urlChangeListeners.forEach((fn) => fn(url, state));\n    }\n    subscribe(onNext, onThrow, onReturn) {\n        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });\n    }\n    normalize(url) {\n        return null;\n    }\n    pushHistory(path, query, state) {\n        if (this._historyIndex > 0) {\n            this._history.splice(this._historyIndex + 1);\n        }\n        this._history.push(new LocationState(path, query, state));\n        this._historyIndex = this._history.length - 1;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: SpyLocation, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: SpyLocation }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: SpyLocation, decorators: [{\n            type: Injectable\n        }] });\nclass LocationState {\n    constructor(path, query, state) {\n        this.path = path;\n        this.query = query;\n        this.state = state;\n    }\n}\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\nclass MockLocationStrategy extends LocationStrategy {\n    constructor() {\n        super();\n        this.internalBaseHref = '/';\n        this.internalPath = '/';\n        this.internalTitle = '';\n        this.urlChanges = [];\n        /** @internal */\n        this._subject = new EventEmitter();\n        this.stateChanges = [];\n    }\n    simulatePopState(url) {\n        this.internalPath = url;\n        this._subject.emit(new _MockPopStateEvent(this.path()));\n    }\n    path(includeHash = false) {\n        return this.internalPath;\n    }\n    prepareExternalUrl(internal) {\n        if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n            return this.internalBaseHref + internal.substring(1);\n        }\n        return this.internalBaseHref + internal;\n    }\n    pushState(ctx, title, path, query) {\n        // Add state change to changes array\n        this.stateChanges.push(ctx);\n        this.internalTitle = title;\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.internalPath = url;\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push(externalUrl);\n    }\n    replaceState(ctx, title, path, query) {\n        // Reset the last index of stateChanges to the ctx (state) object\n        this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n        this.internalTitle = title;\n        const url = path + (query.length > 0 ? '?' + query : '');\n        this.internalPath = url;\n        const externalUrl = this.prepareExternalUrl(url);\n        this.urlChanges.push('replace: ' + externalUrl);\n    }\n    onPopState(fn) {\n        this._subject.subscribe({ next: fn });\n    }\n    getBaseHref() {\n        return this.internalBaseHref;\n    }\n    back() {\n        if (this.urlChanges.length > 0) {\n            this.urlChanges.pop();\n            this.stateChanges.pop();\n            const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n            this.simulatePopState(nextUrl);\n        }\n    }\n    forward() {\n        throw 'not implemented';\n    }\n    getState() {\n        return this.stateChanges[(this.stateChanges.length || 1) - 1];\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: MockLocationStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: MockLocationStrategy }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: MockLocationStrategy, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [] });\nclass _MockPopStateEvent {\n    constructor(newUrl) {\n        this.newUrl = newUrl;\n        this.pop = true;\n        this.type = 'popstate';\n    }\n}\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\nfunction parseUrl(urlStr, baseHref) {\n    const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n    let serverBase;\n    // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n    // an arbitrary base URL which can be removed afterward.\n    if (!verifyProtocol.test(urlStr)) {\n        serverBase = 'http://empty.com/';\n    }\n    let parsedUrl;\n    try {\n        parsedUrl = new URL(urlStr, serverBase);\n    }\n    catch (e) {\n        const result = urlParse.exec(serverBase || '' + urlStr);\n        if (!result) {\n            throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n        }\n        const hostSplit = result[4].split(':');\n        parsedUrl = {\n            protocol: result[1],\n            hostname: hostSplit[0],\n            port: hostSplit[1] || '',\n            pathname: result[5],\n            search: result[6],\n            hash: result[8],\n        };\n    }\n    if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n        parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n    }\n    return {\n        hostname: (!serverBase && parsedUrl.hostname) || '',\n        protocol: (!serverBase && parsedUrl.protocol) || '',\n        port: (!serverBase && parsedUrl.port) || '',\n        pathname: parsedUrl.pathname || '/',\n        search: parsedUrl.search || '',\n        hash: parsedUrl.hash || '',\n    };\n}\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nconst MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\nclass MockPlatformLocation {\n    constructor(config) {\n        this.baseHref = '';\n        this.hashUpdate = new Subject();\n        this.popStateSubject = new Subject();\n        this.urlChangeIndex = 0;\n        this.urlChanges = [{ hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null }];\n        if (config) {\n            this.baseHref = config.appBaseHref || '';\n            const parsedChanges = this.parseChanges(null, config.startUrl || 'http://_empty_/', this.baseHref);\n            this.urlChanges[0] = { ...parsedChanges };\n        }\n    }\n    get hostname() {\n        return this.urlChanges[this.urlChangeIndex].hostname;\n    }\n    get protocol() {\n        return this.urlChanges[this.urlChangeIndex].protocol;\n    }\n    get port() {\n        return this.urlChanges[this.urlChangeIndex].port;\n    }\n    get pathname() {\n        return this.urlChanges[this.urlChangeIndex].pathname;\n    }\n    get search() {\n        return this.urlChanges[this.urlChangeIndex].search;\n    }\n    get hash() {\n        return this.urlChanges[this.urlChangeIndex].hash;\n    }\n    get state() {\n        return this.urlChanges[this.urlChangeIndex].state;\n    }\n    getBaseHrefFromDOM() {\n        return this.baseHref;\n    }\n    onPopState(fn) {\n        const subscription = this.popStateSubject.subscribe(fn);\n        return () => subscription.unsubscribe();\n    }\n    onHashChange(fn) {\n        const subscription = this.hashUpdate.subscribe(fn);\n        return () => subscription.unsubscribe();\n    }\n    get href() {\n        let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n        url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n        return url;\n    }\n    get url() {\n        return `${this.pathname}${this.search}${this.hash}`;\n    }\n    parseChanges(state, url, baseHref = '') {\n        // When the `history.state` value is stored, it is always copied.\n        state = JSON.parse(JSON.stringify(state));\n        return { ...parseUrl(url, baseHref), state };\n    }\n    replaceState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        this.urlChanges[this.urlChangeIndex] = {\n            ...this.urlChanges[this.urlChangeIndex],\n            pathname,\n            search,\n            hash,\n            state: parsedState,\n        };\n    }\n    pushState(state, title, newUrl) {\n        const { pathname, search, state: parsedState, hash } = this.parseChanges(state, newUrl);\n        if (this.urlChangeIndex > 0) {\n            this.urlChanges.splice(this.urlChangeIndex + 1);\n        }\n        this.urlChanges.push({\n            ...this.urlChanges[this.urlChangeIndex],\n            pathname,\n            search,\n            hash,\n            state: parsedState,\n        });\n        this.urlChangeIndex = this.urlChanges.length - 1;\n    }\n    forward() {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        if (this.urlChangeIndex < this.urlChanges.length) {\n            this.urlChangeIndex++;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    back() {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        if (this.urlChangeIndex > 0) {\n            this.urlChangeIndex--;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    historyGo(relativePosition = 0) {\n        const oldUrl = this.url;\n        const oldHash = this.hash;\n        const nextPageIndex = this.urlChangeIndex + relativePosition;\n        if (nextPageIndex >= 0 && nextPageIndex < this.urlChanges.length) {\n            this.urlChangeIndex = nextPageIndex;\n        }\n        this.emitEvents(oldHash, oldUrl);\n    }\n    getState() {\n        return this.state;\n    }\n    /**\n     * Browsers are inconsistent in when they fire events and perform the state updates\n     * The most easiest thing to do in our mock is synchronous and that happens to match\n     * Firefox and Chrome, at least somewhat closely\n     *\n     * https://github.com/WICG/navigation-api#watching-for-navigations\n     * https://docs.google.com/document/d/1Pdve-DJ1JCGilj9Yqf5HxRJyBKSel5owgOvUJqTauwU/edit#heading=h.3ye4v71wsz94\n     * popstate is always sent before hashchange:\n     * https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event#when_popstate_is_sent\n     */\n    emitEvents(oldHash, oldUrl) {\n        this.popStateSubject.next({\n            type: 'popstate',\n            state: this.getState(),\n            oldUrl,\n            newUrl: this.url,\n        });\n        if (oldHash !== this.hash) {\n            this.hashUpdate.next({\n                type: 'hashchange',\n                state: null,\n                oldUrl,\n                newUrl: this.url,\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: MockPlatformLocation, deps: [{ token: MOCK_PLATFORM_LOCATION_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: MockPlatformLocation }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.1.3\", ngImport: i0, type: MockPlatformLocation, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MOCK_PLATFORM_LOCATION_CONFIG]\n                }, {\n                    type: Optional\n                }] }] });\n\n/**\n * Returns mock providers for the `Location` and `LocationStrategy` classes.\n * The mocks are helpful in tests to fire simulated location events.\n *\n * @publicApi\n */\nfunction provideLocationMocks() {\n    return [\n        { provide: Location, useClass: SpyLocation },\n        { provide: LocationStrategy, useClass: MockLocationStrategy },\n    ];\n}\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common/testing package.\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation, provideLocationMocks };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}